
功能1：基于用户认证组件和ajax，实现登录验证（图片验证码）
    1 发送一次请求，可能会伴随多个静态文件的请求

    2 生成图片验证码，涉及到PIL模块的用法:
        基于PIL模块，动态生成响应状态码
        from PIL import Image,ImageDraw,ImageFont
            # 画板
            img = Image.new('RGB', (220, 40), color='red')

            # 画笔draw:只服务img画板，可以往画板上写文字
            draw = ImageDraw.Draw(img)  # 画笔，（包括下方生成的随机字符串）

            # 往画板上画字符、点、线
            draw.text((x, y), 写入的内容, 颜色, font=字体)     # 写入字符
            draw.line((x1, y1, x2, y2), fill='green')       # 画线
            draw.point(x3, y3, fill = get_random_color())   # 画圆
            draw.arc((x3, y3, x3 + 4, y3 + 4), 0, 90, fill=get_random_color())

        f = BytesIO()  # 内存句柄
        img.save(f, 'png')
        data = f.getvalue()
        return data

    3 点击图片验证码刷新：
        方法：点击一次，触发img标签的src属性改变一次（后加一个?），
             进而可发送src请求一次，得到一个新的验证码
        $('#valid_code_img').click(function () {
        $(this)[0].src += '?'
    })

    【补充】滑动验证码
        1 特点：比普通验证码防御机器识别的能力更强
        2 使用前提 :在解释器库中，需要安装social-auth-app-django模块
        3 我的电脑通过settings中install找不到这个模块，于是pip安装
        4 终端命令：pip install social-auth-app-django（系统会帮忙把social-auth-core模块一起安装了）


    4 session存储图片验证码
        1 作用：将该随机验证码保存到session中，每个用户单独保存一份，
             该变量就成了该用户的全局变量，其他视图函数下也可以调用了
        2 在一个视图函数中存：
            request.session['valid_code_str']=valid_code_str
        3 在另一个视图函数中取：
            valid_code_str=request.session.get('valid_code_str')

    5 auth组件进行用户认证：
        1 视图函数端：
            if valid_code.upper() == valid_code_str.upper():
                user = auth.authenticate(username=user_name,password=pwd)
                if user:
                    auth.login(request,user)        # request.user==当前登录对象
                    response['user'] = user.username
                else:
                    response['msg'] = 'username or password error'
        2 html端ajax发送请求，及对返回值data的处理：
             $('.login_btn').click(function () {
                $.ajax({
                    url:'',
                    type:'post',
                    data:{
                        user:$('#user').val(),
                        pwd:$('#pwd').val(),
                        valid_code:$('#valid_code').val(),
                        csrfmiddlewaretoken:$("[name='csrfmiddlewaretoken']").val(),
                    },
                    success:function(data){
                        if(data.user){
                            location.href = '/index/'
                        }
                        else {
                            $('.error').html(data.msg).css({'color':'red','margin-left':'15px'});
                            setTimeout(function () {   {# 2s后清空该错误提示 #}
                            $('.error').html('')
                            },2000);
                        }
                    }
                })
            })

            前端页面的跳转：location.href = '/index/'
        3 【Tip】
            1 当前端通过ajax发送post请求时，视图函数返回的一般是一个字典{}，前端的回调函数success拿到该
              字典data后，再根据接收到的数据判断进一步需要做什么动作。
            2 当前端是通过form表单发送post请求，那么，视图函数返回的一般是render()或redirect()

