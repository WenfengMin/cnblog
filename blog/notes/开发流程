
项目流程：

1 搞清楚需求（产品经理）
    (1) 登录验证：  基于用户认证组件和ajax请求实现登录验证（图片验证码）
        <1> 基于用户认证组件：根据session的会话跟踪技术判断用户是否登录
        <2> ajax：可实现验证时的局部刷新
        <3> 图片验证码

    (2) 注册：  基于forms组件和ajax请求实现注册功能
        <1> forms组件：校验字段
        <2> ajax：根据用户输入，实现局部刷新

    (3) 设计系统首页：  完成文章列表的渲染
        <1> paginator分页器：实现分页功能
        <2> 首页视图的分区：左——中（主要功能区）——右

    (4) 设计个人站点页面
        <1> ORM查询：跨表/分组查询等

    (5) 文章详情页

    (6) 对文章的点赞功能
        <1> ajax

    (7) 对文章的评论功能
        <1> 对文章的评论（根评论）
        <2> 对评论的评论（子评论）

    (8) 后台管理页面：对文章的增删改查
        <1> 添加文章时，涉及到文本编辑器：富文本编辑框和防止xss攻击


2 设计表结构
    1 对于登录和注册，只需要用到一张表即可，即用户表。
        1 而用户认证组件的前提是，得用其自带的auth_user表，但是此处的需求，对于auth_user表里面含有的字段并不够用，
          即需要在该表的基础上，扩展一些字段。方法：自己定义一个表，在原表的基础上，扩展一些原表没有的字段。
        2 User类继承自AbstractUser类，而auth_user表就是有User类得到的，所以若该UserInfo表继承自AbstractUser类
         那么auth_user表中有的字段，UserInfo表也会有（即父类有的属性，UserInfo表都会有），而且还额外有上面定义的nid、telephone等字段。
        3 因为此处只能生成一张用户认证表，而不是2张，所以此处不能再继续继承User类（假如UserInfo类也继承User类的话，
          需要进行创建用户时，当调用UserInfo接口的时候，添加的用户会同时在app01_userinfo表和auth_user表中添加用户？？？），
          可以自己去定义一张用户认证表，继承其父类AbstractUser。
        4 后面要用用户认证组件的话，直接用UserInfo类的接口即可，而不需要再去用User类。
        5 avatar用于存放每个用户的头像，FileField在上传文件时使用
        6 博客园里面显示每个用户的园龄，所以需要知道注册时间create_time，auto_now_add=True表示生成该字段时，默认给当前时间赋值。

        from django.contrib.auth.models import User,AbstractUser
        class UserInfo(AbstractUser):   # 用户信息表
            nid = models.AutoField(primary_key=True)
            telephone = models.CharField(max_length=11,null=True,unique=True)
            avatar = models.FileField(upload_to='avatars/',default='/avatars/default.png')
            create_time = models.DateTimeField(verbose_name='创建时间',auto_now_add=True)

            blog = models.OneToOneField(to='Blog',to_field='nid',null=True)

            def __str__(self):
                return self.username


    2 对于个人站点信息，本来可以放在UserInfo表中添加几个字段如title、site_name、theme中，
      但为了实现数据解耦（业务隔离），将用户数据和站点数据隔离开，所以此处单独定义了一张站点Blog表，
      只要将这两张表（UserInfo和Blog）实现一对一的关系即可。
        class Blog(models.Model):
            '''
            博客信息表（用户站点表，即每个用户的主页）
            '''
            nid = models.AutoField(primary_key=True)
            title = models.CharField(verbose_name='个人博客标题',max_length=64)
            site_name = models.CharField(verbose_name='站点名称',max_length=64)
            theme = models.CharField(verbose_name='博客主题',max_length=32)

            def __str__(self):
                return self.title

    3 每个个人主页（站点）左边都有分类：
      分类：按属性进行分类，如python、linux、爬虫等，
           一篇文章只能有一个分类，一个分类里可以有多篇文章
           一个用户站点表Blog可以有多个分类，所以Category和Blog是多对一的关系，
           进而UserInfo和Category也是一对多的关系


    4 每个个人主页左边都有标签
      标签：就是关键词，一篇文章可以有多个标签，一个标签也可以属于多篇文章
           一个用户站点表Blog可以有多个分类，所以Tag和Blog是多对一的关系，
           进而UserInfo和Tag也是一对多的关系，
           即一个站点可以创建多个标签，但一个标签也只能属于这一个站点



    6 对文章的评论（根评论）
      对评论的评论（子评论）
      111
        444
            555
      222
        666
      333

      Comment
         nid  user_id  article_id  content  parent_comment_id(null=True)
          1      1          1         111           null
          2      2          1         222           null
          3      3          1         333           null
          4      4          1         444             1
          5      5          1         555             4
          6      6          1         666             2



3 按每个功能分别进行开发


4 功能测试


5 项目部署上线


